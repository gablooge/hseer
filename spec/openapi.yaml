openapi: 3.0.0
info:
  version: "0.1"
  title: hseer
  description: "hseer apps for managing the shortener URL."
  contact:
    name: "Samsul Hadi"
    email: "samsulhadikediri@gmail.com"

tags:
  - name: "Shortener URLs"
    description: >-
      APIs for managing the shortener URLs.
  - name: "Users"
    description: >-
      APIs for managing Users.
      
servers:
  - url: https://{your-own-host}:{your-own-port}/{your-own-optional-prefix}
    description: Your own deployment

paths:

  /api/v1/url/shorten/{id}/:
    get:
      tags:
       - "Shortener URLs"
      summary: Get a Shorten URL by ID
      description: |
        Getting a shorten URL by ID.

        Example CURL:
        ```
        curl --location --request GET 'http://localhost:8000/api/v1/url/shorten/1/' \
        --header 'Authorization: Bearer {{access}}'
        ```
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: ID of the shorten URL in the database
      security:
        - bearerAuth: []
      responses:
        200:
          description: >-
            Return a shorten url
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/url-object-token"

        401:
          description: >-
            Invalid login.
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                    example: "Given token not valid for any token type"

        404:
          description: >-
            Invalid login.
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                    example: "Not found."

  /api/v1/url/shorten/:
    get:
      tags:
       - "Shortener URLs"
      summary: Get Shorten URL List
      description: |
        Getting shorten URL List.

        Example CURL:
        ```
        curl --location --request GET 'http://localhost:8000/api/v1/url/shorten/' \
        --header 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjQ4OTQwMTc3LCJpYXQiOjE2NDg5Mzk4NzcsImp0aSI6ImJiZDIxNmIyOWY4ZDQyZThhNmNhMzk1NTMzZTUwMWM1IiwidXNlcl9pZCI6MX0.eyFjD1tlh_RWweNSa_HIZqT2cLdDB8Iq3CsS8KjLffM'
        ```
      security:
        - bearerAuth: []
      responses:
        200:
          description: >-
            Return list of shorten URL
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/url-object-token"

        401:
          description: >-
            Invalid login.
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                    example: "Given token not valid for any token type"

    post:
      tags:
       - "Shortener URLs"
      summary: Create a Shorten URL
      security:
        - bearerAuth: []
      description: |
        Creating a shorten URL.

        Example CURL:
        ```
        curl --location --request POST 'http://localhost:8000/api/v1/url/shorten/' \
        --header 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjQ4OTQwMTc3LCJpYXQiOjE2NDg5Mzk4NzcsImp0aSI6ImJiZDIxNmIyOWY4ZDQyZThhNmNhMzk1NTMzZTUwMWM1IiwidXNlcl9pZCI6MX0.eyFjD1tlh_RWweNSa_HIZqT2cLdDB8Iq3CsS8KjLffM' \
        --header 'Content-Type: application/json' \
        --data-raw '{
            "url": "https://www.highsnobiety.com/p/louis-vuitton-basketball-sneakers/"
        }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              properties:
                url:
                  type: string
      responses:
        201:
          description: >-
            A shorten url created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/url-object-token"
        400:
          description: >-
            Invalid payload.
          content:
            application/json:
              schema:
                properties:
                  url:
                    type: array
                    example: ["This field may not be null"]

        401:
          description: >-
            Invalid login.
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                    example: "Given token not valid for any token type"

  /api/v1/account/login/:
    post:
      tags:
       - "Users"
      summary: Logs user into the system
      description: |
        Logging in a user with username and password and return user details.

        Example CURL:
        ```
        curl --location --request POST 'http://localhost:8000/api/v1/account/login/' \
        --header 'Content-Type: application/json' \
        --data-raw '{
            "username": "example@gmail.com",
            "password": "password"
        }'
        ```
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        200:
          description: >-
            Login success
          content:
            application/json:
              schema:
                properties:
                  refresh:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ"
                  access:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ"
        400:
          description: >-
            Invalid payload.
          content:
            application/json:
              schema:
                properties:
                  username:
                    type: string
                    example: "This field may not be null"
                  password:
                    type: string
                    example: "This field may not be blank"

        401:
          description: >-
            Invalid login.
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                    example: "No active account found with the given credential"
                    
  /api/v1/account/logout/:
    post:
      tags:
       - "Users"
      summary: Logs out current logged in user session
      description: |
        Example CURL:
        ```
        curl --location --request POST 'http://localhost:8000/api/v1/account/logout/' \
        --header 'Authorization: Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjQ4OTI3OTczLCJpYXQiOjE2NDg5Mjc2NzMsImp0aSI6ImRiMDU0OGVlY2FiOTRjOWM5ZjIwNDc3Yjk3OGZhMWJhIiwidXNlcl9pZCI6MX0.TsYWftVxfMLf9WKoCgnsLeRqm9LcuWpjtnQyn5yXkt8' \
        --header 'Content-Type: application/json' \
        --data-raw '{
            "refresh_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY0ODk2NzMyNCwiaWF0IjoxNjQ4ODgwOTI0LCJqdGkiOiI0NTg2ODZlNWQ3OTU0NzdkOTM4YWY2NTQwZGUxMzEyMCIsInVzZXJfaWQiOjF9.o_a6vLI14o7Fem9ozKNl9qolOcepn5aE70anrD_RJRY"
        }'
        ```
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              properties:
                refresh_token:
                  type: string
                  format: password

      responses:
        400:
          description: >-
            Refresh token is not valid
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: False
                  massage:
                    type: string
                    example: "Refresh Token not valid"
        200:
          description: >-
            Access Token Validate.
          content:
            application/json:
              schema:
                properties:
                  success:
                    type: boolean
                    default: True
                  massage:
                    type: string
                    example: "Logout successfully."

  /api/v1/account/token/refresh/:
    post:
      tags:
       - "Users"
      summary: Refresh the access token or get a new access token
      description: |
        Example CURL:
        ```
        curl --location --request POST 'http://localhost:8000/api/v1/account/token/refresh/' \
        --header 'Content-Type: application/json' \
        --data-raw '{
            "refresh": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY0ODk2NzMyNCwiaWF0IjoxNjQ4ODgwOTI0LCJqdGkiOiI0NTg2ODZlNWQ3OTU0NzdkOTM4YWY2NTQwZGUxMzEyMCIsInVzZXJfaWQiOjF9"
        }'
        ```

      requestBody:
        content:
          application/json:
            schema:
              properties:
                refresh_token:
                  type: string
                  format: password

      responses:
        400:
          description: >-
            Invalid payload.
          content:
            application/json:
              schema:
                properties:
                  refresh:
                    type: array
                    example: ["Token is invalid or expired"]
        401:
          description: >-
            Unauthorized. Refresh token is not valid
          content:
            application/json:
              schema:
                properties:
                  detail:
                    type: string
                    example: "Token is invalid or expired"
        200:
          description: >-
            Get new access token.
          content:
            application/json:
              schema:
                properties:
                  access:
                    type: string
                    example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    url-object-token:
      type: object
      properties:
        id:
          type: string
        url:
          type: string
          example: https://www.highsnobiety.com/p/louis-vuitton-basketball-sneakers/
        shorten:
          type: string
          example: https://hseer.com/Ah54n
        created:
          type: string
          example: "2022-04-02T22:51:26.307045Z"
        modified:
          type: string
          example: "2022-04-02T22:51:26.307045Z"
